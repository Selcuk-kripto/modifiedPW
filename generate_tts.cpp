// generate_tts.cpp : Defines the entry point for the console application.
//
//
//
// This code produces and saves the truth tables of the Boolean functions which are
// obtained from the representative truth tables (RTTs) given in the paper: 
// "S. Kavut. Modified Patterson-Wiedemann Construction". 
//
// The code is compiled with Microsoft Visual C++ 2010.
//
// Written by Selçuk Kavut, Balikesir University, Turkey.
//

#include "stdafx.h"
#include "stdlib.h"

FILE *out0=fopen("ADK9.txt", "r");  // The files "ADK9.txt", "ADK11.txt", and "ADK15.txt", contains the integer 
FILE *out1=fopen("ADK11.txt", "r"); // values corresponding to the vector space representations of the nonzero 
FILE *out2=fopen("ADK15.txt", "r"); // elements in GF(2^9), GF(2^{11}), GF(2^{15}), respectively.
  
FILE *out3=fopen("EC15_1.txt", "r"); // This file contains the 21 equivalency classes for k=1.
FILE *out4=fopen("EC15_3.txt", "r"); // This file contains the 49 equivalency classes for k=3.
FILE *out5=fopen("EC15_5.txt", "r"); // This file contains the 93 equivalency classes for k=5.

FILE *out9 =fopen("TTs9.txt", "w");  // The truth tables of the 7 Boolean functions (for the 9-variable case) are saved into this file.
FILE *out11=fopen("TTs11.txt", "w"); // The truth tables of the 13 Boolean functions (for the 11-variable case) are saved into this file.
FILE *out15_1=fopen("TTs15_1.txt", "w"); // The truth tables of the 2   Boolean functions (for the case k=1) are saved into this file.
FILE *out15_3=fopen("TTs15_3.txt", "w"); // The truth tables of the 35  Boolean functions (for the case k=3) are saved into this file.
FILE *out15_5=fopen("TTs15_5.txt", "w"); // The truth tables of the 133 Boolean functions (for the case k=5) are saved into this file.


int EC5[93][3],EC3[49][5],EC1[21][15]; // The equivalence classes are assigned to these arrays.

// The following arrays are used to compute algebraic degree.
int *T=(int *)malloc(32769*sizeof(int)); 
int *u=(int *)malloc(32769*sizeof(int)); 
int *t=(int *)malloc(32769*sizeof(int)); 
int *BS=(int *)malloc(32769*sizeof(int)); 

int _tmain(int argc, _TCHAR* argv[])
{
	// The following array contains the 7 RTTs for the 9-variable case (mentioned in Remark). 
	int RTT9[7][7]={{0,0,1,1,1,0,1,},
				  {0,1,0,0,1,1,1,},
				  {0,1,1,1,0,1,0,},
				  {1,0,0,1,1,1,0,},
			      {1,0,1,0,0,1,1,},
			      {1,1,0,1,0,0,1,},
				  {1,1,1,0,1,0,0,}};

	// The following array contains the 13 RTTs for the 11-variable case (given in Table 5). 
	int RTT11[13][89]={{1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,1,0,0,0,1,0,1,0,0,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,1,1,1,1,1,1,0,0,1,0,0,0,1,0,1},				
					 {1,1,1,0,0,1,0,0,0,0,1,0,1,1,0,1,1,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,0,1,0,1,1,1,0,0,1,0,0,1,0,1,0,0,1,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,1,0,0,1,0,1,0,0,0,0,1},
					 {0,1,1,0,0,1,0,1,1,1,1,0,1,1,0,0,0,0,1,1,0,0,1,0,1,0,0,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,1},
					 {0,1,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,1,0,0,0,0,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,0,1,0,0,0,0,1,0,1,1,1,0,0,0,1,1,0,0,1,0,0},
					 {0,0,1,0,0,1,0,0,1,1,1,0,0,1,1,0,1,1,0,1,1,1,0,0,1,0,1,0,1,1,0,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0},
					 {1,1,0,1,1,1,1,1,0,0,1,0,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,1,1,0,1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,0,0,0,0,1,0,0,1,1,0,0,0,1},
					 {1,0,1,1,0,1,1,0,1,1,0,1,0,1,0,0,1,0,1,1,0,1,1,1,0,1,0,0,0,1,0,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,1,0,1,0,0,1,0,1,0,1,0,0,0,0,1,1,1,0,0,0,1,0,0,0,1},
					 {0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,0,1,1,1,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1},
					 {1,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0},
					 {1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,1,0,1,1,0,0,1,1,0,0,1,0},
					 {1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,0,0,1,0,1,1,1,0,1,0,0,1,1,1,0,0,0,0,0,1,0,1,0,1,1,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,0,0,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,1,1,0,0},
					 {0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,0,1,0,1,0,0,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,0,0,1,1,1,1,0,0},
					 {1,1,1,0,0,0,1,1,0,0,0,0,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,0,1,0,0,0,1,1,0,1,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,1,0,0,1,1,0,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,0,1,0,0,0,1,0,1,0,0,1,0,1,0,0,1}};

	// The following array contains the 2 RTTs for the case k=1 (given in Table 1). 
	int RTT15_1[2][21]={{0,0,1,1,0,0,0,1,0,1,1,0,1,1,1,1,0,0,1,0,0},{0,1,0,0,1,1,1,0,1,0,0,1,0,0,0,0,1,1,0,1,1}};

	// The following array contains the 35 RTTs for the case k=3 (given in Table 2). 
	int RTT15_3[35][49]={{1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,1,1,0,1,0,1,0,1,1,1,1,0,0,1,1,0,0,1,0,1,1,1,0,0,0,0}, 
						{1,1,0,0,1,0,1,1,0,1,0,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,1,0,1,0,1,1,1,0,0}, 
						{1,1,0,1,0,0,1,1,0,1,0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,1,1,0,1,1,0,0,1,1,1,0,0,1,1,0,1,0,0,0,1,1,0,1,0}, 
						{1,0,1,0,0,1,0,1,0,1,1,0,1,1,1,1,0,0,0,0,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,1,1,1,0,0,1,1,1,1,0,0,1}, 
						{1,0,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0}, 
						{1,0,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,1,1,1,0,1,0,1,1,1,0,1,0,0}, 
						{1,0,0,0,1,0,0,1,0,1,0,0,0,1,0,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,0,0,0,1,0,0,1,1,0,1,0,0,1,0,1,0,0,1,0}, 
						{1,1,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,0,1,0,0}, 
						{1,1,0,0,1,0,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,1,1,0,1,0,1,1,0,1,1,0,0,0,0,1,0,1,1,1,1,0,1,0,1,0}, 
						{1,1,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1,0,0,0,0,1}, 
						{1,0,0,1,1,1,0,1,0,1,1,1,0,0,1,1,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,1,0,1,0,1}, 
						{1,0,1,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,1,0,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,1,0,0,0,1,1}, 
						{0,1,1,1,1,0,1,0,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,1,1,0,0,0,1,1,0,0,0,1,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0}, 
						{0,1,1,1,1,0,0,1,0,1,1,0,0,0,0,0,1,0,0,0,1,0,1,1,0,1,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,1,1,0,1,0,1,0}, 
						{0,0,0,1,1,0,1,0,1,1,1,0,1,0,1,0,1,0,0,0,1,0,1,1,0,0,0,1,1,0,0,1,0,0,1,0,1,1,1,1,0,0,1,1,0,1,0,0,1}, 
						{0,0,1,1,0,1,0,0,1,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,0,1,0,0,0,1,0,1,0,1,1,0,0}, 
						{0,1,1,1,0,1,1,1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,0}, 
						{0,1,1,1,0,0,0,1,1,0,1,0,0,0,1,0,1,0,1,1,1,0,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,0,1,0,0,0,1}, 
						{0,1,1,1,1,1,0,0,1,0,0,1,1,1,0,1,0,0,0,0,1,1,0,1,0,0,1,0,1,0,0,0,0,0,0,1,0,1,1,1,1,0,1,1,0,0,1,1,0}, 
						{0,1,1,0,1,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,1,1,1,1,0,1,0,0,0,1,1,0,1,1,0,1,0,1,0,1,0,0,0,1,0,1,1,0,1}, 
						{0,1,1,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,1,0,1,1,0,1,1,0,1,0,1,0,1,1,0,0}, 
						{0,0,1,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,1}, 
						{0,1,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,0,1,0,0,0,1,0,1,1,0,1,1,0,0,1,0,0,0,1,1,0}, 
						{0,1,1,0,1,0,1,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,1,0,1,0,1,1,1,0,0,1,0,1,1,0,1,1,1,0,1,0,0,1,0,0,1,0,1}, 
						{0,0,1,0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,1,1,0,1,1}, 
						{0,1,0,0,1,0,0,1,1,1,1,1,0,1,0,1,0,0,0,1,1,0,1,0,1,1,1,1,1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,1,1,0}, 
						{0,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,0,0,1,0,1,0,1,1,0,0,1,1}, 
						{0,1,0,1,1,1,0,1,0,0,0,1,0,0,1,1,1,1,0,1,0,1,0,0,0,1,0,0,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1,0,0,0,1,1,1}, 
						{1,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,1,1,0,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,1,0,0,0}, 
						{1,1,0,0,1,0,1,1,0,0,1,0,1,1,1,0,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,0,0,0,1}, 
						{1,1,1,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,0,1,1,0,1,1,0,1,0,0,0,0,1,0,0,0,1,0,1,1,0}, 
						{0,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,0,1,1,0,0}, 
						{0,1,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,1,1}, 
						{0,1,1,0,0,0,1,0,1,0,0,0,1,1,0,0,1,0,1,1,0,0,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,0,1,0,1,0}, 
						{0,0,1,0,1,1,0,0,1,0,1,1,1,0,1,1,0,0,0,1,1,1,1,0,1,0,0,1,0,0,1,1,0,0,0,1,0,0,0,1,0,1,1,1,0,0,1,0,1}}; 

	// The following array contains the 133 RTTs for the case k=5 (two of them are given in Table 4). 
	int RTT15_5[133][93]={{0,0,0,1,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,0,1,1,1,1,1},
						{1,0,0,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,1,0,0,1,1,0,0,1,0,0,1,1,1,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,0},
						{0,0,1,1,0,0,0,1,1,0,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,0,0,0,1,1,0,1,1,0,0,1,0,0,0,1,0,1,1,1,0,0,0,0,0,1,1,1,1,0,1,0,0,0,1,1,1,1,1,0,0,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,0,1,0,0,0},
						{1,0,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,1,1,0,1,0,0,0,1,0,1,1,1,1,0,1,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,1,1,0,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,0,1,1,0,1,1,0,1,0,1,1,0,1,0,0,1,0},
						{1,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,1,0,1,0,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,1,0,0,0,1,0,0,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1,1,1,1,0,0,1,1,0,1,1,1,0,1},
						{1,1,1,0,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,0,1,0,1,1,0,1,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1},
						{0,1,0,0,1,1,0,1,1,1,0,0,1,0,1,1,1,0,1,0,0,0,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,1,0,1,0,0,0,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,0,1,0,1,0,1,1,0,1,0,1,1},
						{1,1,1,0,0,0,0,0,1,0,1,0,0,1,0,0,1,0,1,1,1,0,1,0,0,1,0,1,1,0,0,0,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,1,1,0,0,1,1,0,1,0,1,1,1,1,1,0,0,0,1,0,1,1,0,1,1,1,1,1,0,1,1},
						{1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,1,0,0,0,1,0,0,0,0,1,0,0,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,1,0,0,1,1,1,1,0,0,1,1,0,1},
						{1,1,1,0,1,1,0,1,0,1,0,1,0,0,1,1,0,0,0,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,1,1,1,0,1,1,0,1,0,1,1,1,0,0,1,0,0,1,1,0,0,1,0,1,1,1,1,1,0,0,1,0,1,0,0,1,0,1,1,0,1,0,1,1,0,0,0,1,1,0,0},
						{0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,1,1,0,1,1,1,1,1,0,1,1,0,0,0,1,1,0,0,0,1,0,0,1,1,1,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1,0,0,1,1,0,0,1,0,1,0,1,0,0,1,0,1,0,1},
						{0,0,1,1,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1,0,1,0,0,1,1,0,0,1,1,0,1,0,0,1,0,1,0,0,1,1,0,0,0,1,0,1,1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,1,0,1,0,0,0},
						{0,1,0,1,0,0,0,1,0,0,1,0,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,1,1,1,0,0,1,1,0,1,1,1},
						{0,0,0,1,0,0,0,0,0,1,1,0,1,1,1,1,1,0,0,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,0,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1,1,1,1,0,0},
						{0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,1,0,1,1,1,0,1,0,0,1,1,1,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,1,0,1,0,1,0,1,1,0,1,0,0,0,1,0,1,1,1,0,0,0,1,1,0,0,1,0,1,0,1,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,1},
						{0,1,0,0,0,0,0,0,1,1,1,0,0,1,1,0,1,0,0,0,1,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,1,1,1,1,0,1,1,0,1,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1},
						{1,1,1,0,0,0,0,0,1,0,0,0,0,1,1,0,0,1,0,1,1,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,1,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,1,1,1,1,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1},
						{1,0,1,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,0,1,1,0,0,1,1,0,1,0,0,1,1,1,0,0,1,1,0,0,0,1,0,0,1,1,0,1,1,0,0,1,0,0,0,1,0,1,1,0,1,0,1,1,1,0},
						{0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,0,1,0,0,0,0,1,0,0,1,1,1,0,0,0,1,0,0,1,1,1,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,0},
						{1,1,0,0,0,0,1,1,0,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,1,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,0,1,1,0,0,0,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,0,1,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,0,1,1,0,1,0,0,1,1,1},
						{0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,1,1,0,1,0,0,0,0,1,1,0,0,1,1,0,1,1,0,1,1,1,0,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,0,1,0,0,1,0,0,0,1,1,1,0,0,0,1,1,0,1,0,1},
						{0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,1,1,0,1,1,0,1,1,1,1,0,1,0,1,1,1,1,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,1,0,1,1,1,1,0,1,0,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0},
						{0,1,0,0,0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,1,0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,1,1,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,1,0},
						{1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,0,1,1,1,0,0,0,1,0,1,1,0,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,0,0,1,1,0},
						{1,0,1,0,0,1,0,1,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,0,1,0,1,0,0,1,1,0,1,1,1,1,0,0,0,0,1,1,0,0,1,0,1,1,1,0,0,1,0,0,1,0,0,1,1,1,1,0,1,0,1,0,0,0,1,1,0,1,1,0,0,1,1,1,1,0,0},
						{0,1,0,1,0,0,1,0,0,1,0,1,1,1,0,1,0,0,1,0,1,1,0,0,0,1,1,0,1,0,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,1,0,1,1,0,0,1,1,0,1,0,1,1,1,1,1,0,0,0,1,0,0,0,1,1,0,1,1,1,1,1,0,1,1,1},
						{0,0,1,1,0,0,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,1,1,1,1,1,0,0,1,0,0,0,0,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,1,0,1,1,1,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,1},
						{1,0,1,0,0,0,0,1,1,0,1,1,0,0,1,0,1,0,1,1,0,1,0,1,0,0,0,1,0,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,1,1,0,1,1,1,1,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,1,1,1,0,0},
						{0,0,0,1,1,1,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,1,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0,1,1,1,0,0,1,1,0},
						{1,0,1,1,0,1,0,1,1,1,1,0,1,0,1,0,0,1,0,0,1,0,1,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,1,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,1,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0,1,1,1,0,0},
						{1,1,1,1,0,0,1,0,0,1,1,0,1,0,0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,1,0,0,1,0,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,0,1,1,1,1,0,1,1,1,1,0,1,0},
						{1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,0,1,0,1,0,0,1,1,0,0,1,0,0,1,0,1,0,0,1,0,1,1,1,1,0,0,1,1,1,0,0,1,1,0,0,1,1,0,1,0,1,1,0,0,0,0,1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,1,0,1,1},
						{0,0,0,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,1,0,0,1,1,0,1,0,1,1,1,0,1,1,1,1,0,0,1,0,1,0,1,1,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,1,0,1,1,1,0,1},
						{1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,1,1,1,0,0,0,1,1,0,0,0,0,1,1,0,1,0,0,1,1,1,0,0,0,1,0,1,0,0,1,1,0,0,1,1,1,1,1,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,0,1,0,0,1,0,1,0,1,1,1,0},
						{1,1,0,1,0,1,0,0,1,0,1,0,1,1,0,0,1,1,0,1,1,0,0,0,0,1,1,1,0,1,0,0,1,1,1,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,1,1},
						{0,1,1,0,1,0,0,1,0,0,1,1,0,1,0,0,1,1,0,0,1,0,1,0,0,0,1,1,1,1,0,1,1,0,1,1,0,0,1,1,1,1,1,0,0,0,0,1,0,1,0,0,1,1,1,0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,1,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,1,0,1,1,0,0},
						{0,0,0,1,1,0,1,0,0,1,1,0,0,0,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,0,0,0,1,0,1,0,0,1,0,1,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,1,1,0,1,0,1,1,1},
						{0,1,1,0,1,0,0,1,1,0,1,0,0,0,1,1,1,0,0,0,0,1,1,0,1,0,1,1,1,0,1,0,1,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,0,1,1,0,1,1,1,0,0,1,0,0,0},
						{0,1,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,1,1,1,0,1,1,0,0,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0},
						{1,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0,1,0,0,1,0,1,1,0,1,1,1,1,0,0,0,1,1,0,1,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,1,0,1,0,1,0,0,1,0,1,1},
						{1,0,1,1,0,0,0,0,0,1,1,0,1,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0},
						{1,0,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,0,1,0,1,1,1,0,0,0,1,0,0,1,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,1,1,1,0,0,1,1,0,1,0},
						{0,1,1,0,1,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0,0,0,1,0,1,1,1,1,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1,0,1,1},
						{0,0,1,0,0,1,0,1,1,0,1,1,1,0,0,0,1,1,0,1,0,1,1,1,1,0,0,1,0,1,0,0,1,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,0,1,1,0,0,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,1,0,0,0,0,0,1,0,1},
						{0,0,1,0,0,1,1,1,0,1,0,0,0,0,0,1,0,1,1,0,1,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,0,0,1,1,0,1,0,0,1,1,1,1,1,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,1,1,0,0,1,1,1,1,0,1,0,0,0,0,0,1,0},
						{0,0,1,0,0,0,1,1,1,1,1,0,1,0,0,1,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,0,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,0,1,0,1,1,0,1,0,0,0,0,1,0,1,1,1,0,1,1,0,1,1,0,0,0,1,1,1,1,1,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0},
						{1,0,0,0,1,1,0,1,1,1,0,0,0,0,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,1,0,1,1,0,1,0,1,0,0,0,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1,0,1},
						{1,0,0,1,1,1,0,1,0,1,1,0,0,0,1,0,0,1,0,1,0,1,1,1,1,0,1,1,0,0,0,1,1,1,1,0,0,1,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,1,0,1,1,1,1,0,1,0,0,0,1,0,1,1,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,1,0,1,1,0,1,0,0,0,0},
						{1,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,1,1,1,1,1,0,0,0,1,1,0},
						{1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,1,0,1,1,1,1,1,0,0,0,1,1,0,1},
						{1,0,1,1,1,1,0,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,1,0,0,0,1,1,0,1,0,1,1,0,0,0,1,1,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,0,1,1,0,1,1,1,0,0,1,0,1,1,0,1,1,0,0,0,0,0,0,0,1,0,1,0,1,1,1,0,0,1,1,0,0,0,0,1},
						{1,0,1,0,0,1,1,0,0,0,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,1,0,0,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,0,0,0,0,0,0},
						{1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,1,1,0,0,1,1,1},
						{1,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,0,1,1,0,1,0,0,1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,0,1,0},
						{0,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,1,0,0,1,1,0,1,1,1,1,1,0,0,0,1,1,0,1,1,1},
						{0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,0,1,1,1,1,1,0,0},
						{0,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1},
						{1,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,1},
						{1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0},
						{1,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,1,1,0,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0},
						{0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,1,0,0,1,0,1,1,0,1,1,1,0,1,0,1,0,0},
						{1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,1,1,0,0,1,1,1,1,1,0,0,0},
						{0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1},
						{0,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,1,1,0,0,1,1,1,1,1,0},
						{0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,1},
						{0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,1,0,0,1,0,0,1,1,1,0,1,1,1,0,1,0,1,0,0,0},
						{1,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,1},
						{1,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,1},
						{0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,1,1,0,1,0,0,1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,1,1,0,1,1,1,0,1,0,1},
						{1,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0},
						{0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,0,0,0,0,0,0,1,0,1,1,0},
						{0,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0},
						{0,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,1,0,0,1,1,0,1,1,0,1,1,0,1,1,1,0,0,0,1,1,0,1,1,1,0,1},
						{1,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,1,1,0,0,1,1,1,1},
						{0,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,1,1,0,1,1,0,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1,0,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0},
						{0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1,1,1,0,1,0,1,0,0,0,0},
						{1,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,1,0,1,1,0,0,1},
						{1,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,1,0,0,1,1,0,1,1,0,1,1,1,1,0,0,0,1,1,0,1,1,1,0},
						{1,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,0,0,0,1,1,0,1,1},
						{0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,1,1,0,1,0,0,1,1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1},
						{0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,1,0},
						{0,0,1,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,1,1,0,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,1,0,1,1,0,1,1,1,0,1,0,0,0,0,1,1,0,1,0,1,1,0,0,0,0,0,1,0,1,1},
						{0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,0,0,1,1,1,1,0,1,0,1,1,0,1,1,0,1,0,1,0,0,0,1,1,0,1,1,1,1,1,0,0,1,1,0,1,1,0,0,0,1,1,1,1,1,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1},
						{0,1,1,0,1,0,1,0,1,0,0,1,0,1,1,0,1,0,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,1,1,0,1,0,1,1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,1},
						{0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,1,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,1,0,1,1,1,0,0,0,0,1,0,1,0,1,1,0,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,1,0,0,0,1,0,0,1,0,0,1,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0},
						{1,1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,0,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0,1,0,1,1,1,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0},
						{1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,1,1,0,1,0,1,0,1,1,1,1,0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0,1,1,0,1,0,0,1,1,1,1,0,1,1},
						{0,0,1,1,1,1,1,0,1,1,0,0,0,0,0,1,0,1,0,0,0,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,1,0,0,0,0,1,0},
						{1,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,0,1,1,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,0,0,0,1,0,1,0,1},
						{0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,1,0,1,0,1,1,1,1,0,1,1,0,1},
						{1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0,1,1,0,1,1,0,1,1,0,0,1,0,1,1,0,1,1,0,0,1,0,0,1,1,0,0,0,0,0,1,1},
						{1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1,0,1,1,0,1,1,0,0,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,1,0,1,1,1,1,0,1,1,0},
						{0,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,0,0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,0},
						{0,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,0,1,0,1,1,0,1,1,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,1,1,1,0},
						{0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,1,0,1,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,1,1,0,1,0,0,0,0,0,1,1,1,0,0,1,0},
						{1,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,1,1,1,0,1,1,0,1,0,0},
						{0,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,0,1,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,0,1,0,0},
						{1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,1},
						{1,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,0,0,0},
						{1,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,1,0,0,1,0,0,0,1,0,1,0},
						{1,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,0,1,1,0,0,1,0,1,1,0,1,1,0,1,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,0,1,1,0,0,0,0,0,1},
						{1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,0,1,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,0,0},
						{1,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1,1,0,1,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,0,0,0},
						{0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,1,0,1},
						{0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,0,1,1,0,1,1,0,1,1,0,1,1,0,0,1,0,1,1,0,1,1,0,0,1,0,1,0,0,1,1,0,0,0,0,0,1,1,1},
						{0,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,1,1,0,0,1,0,1,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,1,1,0,0,0,0,0,1,1,1,0,0,1},
						{0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,0,1,1,0,0,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,1,0,1,1,1,1,0,1,1,0,1,0},
						{1,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,0,1,1,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,0,0,1,0,0,1,0,0,0,1,1,1,0,0,1,0,0,0,1,0},
						{0,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1,1,1,0,1,1,0,1,0,0,1,1,0},
						{0,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,0,1,0,1,1,0,1,1,0,1,1,0,0,1,0,0,1,0,1,1,0,0,1,0,0,0,1,0,1,0,1,1,1,1,0,1,1},
						{1,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,1,1,0,1,1,0,0,1,0,0,1,0,1,0,0,0,1,0,1,0,1,1,1,1,0},
						{1,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,1,1,0,1,0,0,1,0,0,0,1,0,1,0,1,1},
						{1,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,1,0,1,1,1},
						{1,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,0,1,0,0,1,0,1,1,0,1,1,0,1,1,0,0,1,0,0,1,0,1,1,0,0,0,0,1,0,1,0,1,1,1,1,0,1},
						{0,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,1,1,1,1,0,1,1,0,1,0,0,1,1},
						{0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,1,0,0,1,1,0,0,0},
						{0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1,1,0,1,1,0,1,1,0,0,1,1,0,1,0,0,1,1,0,0,0,0},
						{0,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,1,1,1,0,0,1,0,0,0,1},
						{0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,1,1,0,1,1,0,0,1,0,0,1,0,0,0,1,0,1,0,1,1,1,1},
						{1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,0,1,1,1,1,0,1,0,0,0,0,1,1,0,1,0,1,0,0,0,0,1,0,0,1,1,1,0,1,1,0,0,0,0,1,1,1,0,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,0,0,0},
						{0,0,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,1,0,1,1,1,1,0,1,0,1,1,0,1,1,0,0,1,0,1,1,1,1,0,1,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,1,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,0,1,0},
						{1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,1,0,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1,0,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,1,1,1,1,0,0,0,1,0,1,1,1,1,0,1,1,0,0,0,1,0,0,1,1,0,0,0,0,0,1},
						{0,0,1,0,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,0,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,1,1,0,1,0,0,1,1,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,1,0,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,0},
						{1,1,1,0,0,0,0,1,1,1,0,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,0},
						{0,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,1,1,0,1,0,1,1,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,0,1,0,1,0,0,0,0},
						{1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,1,1,0,1,1,0,0,1,0,0,0,1,0,1,1,0,0,1,0,1,1,1,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,0,0,1,1,1,0,0,0,1,1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,0,1},
						{1,1,1,0,0,1,0,0,1,1,1,1,0,1,1,1,1,0,1,0,0,0,0,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,0,0,0,1,0,1,1,0,0,1,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,0,1,0,1,0,1,0,1,0,0,1,0,0,1,0,0,1},
						{0,1,1,0,1,0,0,0,1,1,0,1,1,0,0,0,1,0,1,1,1,1,0,0,0,0,0,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,0,1,1,0,1,0,0,0,1,1,0,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,1,0},
						{1,0,1,0,0,1,1,0,1,1,1,0,1,1,0,0,1,0,1,0,0,1,0,1,0,1,0,0,0,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,0,1,1,0,1,1,0,1,1,1,0,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,0,0,0,0},
						{0,0,0,0,1,1,1,1,0,1,0,1,1,0,0,1,1,0,0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,1,0,0,1,0,1,0,0,1,1,0},
						{0,1,0,0,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,1,1,1,0,1,1,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,1,1,0,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,1,0,0,1,1,0,0},
						{1,1,1,0,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,1,0,0,1,1,0,1,0,1,1,0,1,1,0,0,1,0,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,1,0,1,0,0},
						{0,0,1,1,1,1,0,1,1,1,0,1,1,0,1,1,0,0,0,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,1,1,0,1,0,1,0,0,0,1,1,0,1,1,0,1,0,0,1,0,0,1,0,0,1,0,0,0}};

	// The array SZ1 contains the sizes of the 21 equivalence classes for k=1.
	int SZ1[]={1,15,15,15,5,15,15,15,15,15,5,15,15,3,15,5,15,5,5,3,5};

	// The array SZ3 contains the sizes of the 49 equivalence classes for k=3.
	int SZ3[]={1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,1,5,5,5,5,1,1,1};

	// The array SZ5 contains the sizes of the 93 equivalence classes for k=5.
	int SZ5[]={1,3,3,3,3,3,3,1,3,3,3,3,3,3,1,3,3,3,3,3,3,1,3,3,3,3,3,3,1,3,3,3,3,1,3,3,3,3,1,3,3,3,3,1,3,3,3,3,1,3,3,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1};
	
	void fastwh(int *FW, int *TTs, int n, int N); // Computes Walsh spectrum in integer format
	void fastwhld(long double *FW, long double *TTs, int n, int N); // // Computes Walsh spectrum in double format
	int acor(int *FW, int n, int N); // Computes autocorrelation spectrum
	int anf(int *TT, int n, int N); //Computes algebraic degree

	int findmax(int *FW, int N); // Finds max. absolute value

	int i,j,k,x,NL,K,Ls[93],ai,d;
	int *TTs,*TT,*FW,*ADK15,*ADK11,*ADK9;

	TT=(int *)malloc(32768*sizeof(int));  // "TT"  will be used to represent the truth table. 
	FW=(int *)malloc(32768*sizeof(int));  // "FW"  will be used to represent the Walsh-Hadamard transform of "TT".
	TTs=(int *)malloc(32768*sizeof(int)); // "TTs" will be used to represent the polar form of "TT".

    // As "ADK15" below will contain the integer values corresponding to the vector space 
	// representations of the nonzero elements in GF(2^{15}), its size is (= 2^{15}-1).
	ADK15=(int *)malloc(217*151*sizeof(int));

	// Similarly, "ADK9" and "ADK11" below contain the integer values corresponding to the vector space 
	// representations of the nonzero elements in GF(2^9) and GF(2^{11}), resp.)
	ADK9=(int *)malloc(7*73*sizeof(int));
	ADK11=(int *)malloc(89*23*sizeof(int));

	i=0;
	while (!feof(out0))
	{
		fscanf(out0,"%d ",&x);
		*(ADK9+i)=x;
		i=i+1;
	}
	fclose(out0);

	i=0;
	while (!feof(out1))
	{
		fscanf(out1,"%d ",&x);
		*(ADK11+i)=x;
		i=i+1;
	}
	fclose(out1);

	i=0;
	while (!feof(out2))
	{
		fscanf(out2,"%d ",&x);
		*(ADK15+i)=x;
		i=i+1;
	}
	fclose(out2);

	i=0;j=0;
	while (!feof(out5))
	{
		fscanf(out5,"%d ",&x);
		EC5[i][j]=x;
		j=j+1;
		if (j==3)
		{
			i=i+1;
			j=0;
		}
	}
	fclose(out5);

	i=0;j=0;
	while (!feof(out4))
	{
		fscanf(out4,"%d ",&x);
		EC3[i][j]=x;
		j=j+1;
		if (j==5)
		{
			i=i+1;
			j=0;
		}
	}
	fclose(out4);

	i=0;j=0;
	while (!feof(out3))
	{
		fscanf(out3,"%d ",&x);
		EC1[i][j]=x;
		j=j+1;
		if (j==15)
		{
			i=i+1;
			j=0;
		}
	}
	fclose(out3);

	// The following loop saves the 7 truth tables (mentioned in Remark).
	for (K=0;K<7;K++)
	{
		for (i=0;i<7;i++)
			Ls[i]=RTT9[K][i];

		TT[0]=0; //We set the 0th bit of the truth table to zero.
		for (i=0;i<7;i++)
			for (j=0;j<73;j++)
				TT[*(ADK9+7*j+i)]=Ls[i];
		for (i=0;i<512;i++)
			TTs[i]=1-2*TT[i];
		fastwh(FW,TTs,9,512); 
		NL=512/2-findmax(FW,512)/2; // NL is the nonlinearity.
		ai=acor(FW,9,512);  // ai is the absolute indicator.
		d=anf(TT,9,512);	// d is the algebraic degree.
		fprintf(out9,"\nTT # : %3d NL=%d AI=%d d=%d\n",K+1,NL,ai,d);
		for (i=0;i<512;i++)
			fprintf(out9,"%d ",TT[i]);
	}
	fclose(out9);

	// The following loop saves the 13 truth tables (obtained for the 11-variable case).
	for (K=0;K<13;K++)
	{
		for (i=0;i<89;i++)
			Ls[i]=RTT11[K][i];

		TT[0]=0; //We set the 0th bit of the truth table to zero.
		for (i=0;i<89;i++)
			for (j=0;j<23;j++)
				TT[*(ADK11+89*j+i)]=Ls[i];
		for (i=0;i<2048;i++)
			TTs[i]=1-2*TT[i];
		fastwh(FW,TTs,11,2048); 
		NL=2048/2-findmax(FW,2048)/2;
		ai=acor(FW,11,2048); 
		d=anf(TT,11,2048);
		fprintf(out11,"\nTT # : %3d NL=%d AI=%d d=%d\n",K+1,NL,ai,d);
		for (i=0;i<2048;i++)
			fprintf(out11,"%d ",TT[i]);
	}
	fclose(out11);

	// The following loop saves the 2 truth tables (obtained for k=1).
	for (K=0;K<2;K++)
	{
		for (i=0;i<21;i++)
			Ls[i]=RTT15_1[K][i];

		TT[0]=0; //We set the 0th bit of the truth table to zero.
		for (i=0;i<21;i++)
			for (k=0;k<SZ1[i];k++)
				for (j=0;j<151;j++)
					TT[*(ADK15+217*j+EC1[i][k])]=Ls[i];
		for (i=0;i<32768;i++)
			TTs[i]=1-2*TT[i];
		fastwh(FW,TTs,15,32768); 
		NL=32768/2-findmax(FW,32768)/2;
		ai=acor(FW,15,32768); 
		d=anf(TT,15,32768);
		fprintf(out15_1,"\nTT # : %3d NL=%d AI=%d d=%d\n",K+1,NL,ai,d);
		for (i=0;i<32768;i++)
			fprintf(out15_1,"%d ",TT[i]);
	}
	fclose(out15_1);

	// The following loop saves the 35 truth tables (obtained for k=3).
	for (K=0;K<35;K++)
	{
		for (i=0;i<49;i++)
			Ls[i]=RTT15_3[K][i];

		TT[0]=0; //We set the 0th bit of the truth table to zero.
		for (i=0;i<49;i++)
			for (k=0;k<SZ3[i];k++)
				for (j=0;j<151;j++)
					TT[*(ADK15+217*j+EC3[i][k])]=Ls[i];
		for (i=0;i<32768;i++)
			TTs[i]=1-2*TT[i];
		fastwh(FW,TTs,15,32768); 
		NL=32768/2-findmax(FW,32768)/2;
		ai=acor(FW,15,32768); 
		d=anf(TT,15,32768);
		fprintf(out15_3,"\nTT # : %3d NL=%d AI=%d d=%d\n",K+1,NL,ai,d);
		for (i=0;i<32768;i++)
			fprintf(out15_3,"%d ",TT[i]);
	}
	fclose(out15_3);

	// The following loop saves the 133 truth tables (obtained for k=5).
	for (K=0;K<133;K++)
	{
		for (i=0;i<93;i++)
			Ls[i]=RTT15_5[K][i];

		TT[0]=0; //We set the 0th bit of the truth table to zero.
		for (i=0;i<93;i++)
			for (k=0;k<SZ5[i];k++)
				for (j=0;j<151;j++)
					TT[*(ADK15+217*j+EC5[i][k])]=Ls[i];
		for (i=0;i<32768;i++)
			TTs[i]=1-2*TT[i];
		fastwh(FW,TTs,15,32768); 
		NL=32768/2-findmax(FW,32768)/2;
		ai=acor(FW,15,32768); 
		d=anf(TT,15,32768);
		fprintf(out15_5,"\nTT # : %3d NL=%d AI=%d d=%d\n",K+1,NL,ai,d);
		for (i=0;i<32768;i++)
			fprintf(out15_5,"%d ",TT[i]);
	}

	fclose(out15_5);
	return 0;
}

// The function "fastwh" implements the fast Walsh-Hadamard transform.
void fastwh(int *FW, int *TTs, int n, int N)
{
	int i,j,i1,i2,i3,k1=2,k2=N/2,k3=1,L1,temp1,temp2;
	for (i=0;i<N;i++)
		FW[i]=TTs[i];
	for (i1=0;i1<n;i1++)  
	{
	   L1=1;
	   for (i2=0;i2<k2;i2++)
	   {
		  for (i3=0;i3<k3;i3++)
		  {
			 i=i3+L1-1; j=i+k3; 
		     temp1= FW[i]; temp2 = FW[j]; 
			 FW[i]=temp1+temp2;
		     FW[j]=temp1-temp2;
		  }
	      L1=L1+k1; 
	   }
	   k1=k1*2; k2=k2/2; k3=k3*2;
	}
}

// The function "fastwhld" is used to compute the Walsh-Hadamard transform in double format.
void fastwhld(long double *FW, long double *TTs, int n, int N)
{	
	int i,j,i1,i2,i3,k1=2,k2=N/2,k3=1,L1;
	long double temp1,temp2;
	for (i=0;i<N;i++)
		FW[i]=TTs[i];
	for (i1=0;i1<n;i1++)  
	{
	   L1=1;
	   for (i2=0;i2<k2;i2++)
	   {
		  for (i3=0;i3<k3;i3++)
		  {
			 i=i3+L1-1; j=i+k3; 
		     temp1= FW[i]; temp2 = FW[j]; 
			 FW[i]=temp1+temp2;
		     FW[j]=temp1-temp2;
		  }
	      L1=L1+k1; 
	   }
	   k1=k1*2; k2=k2/2; k3=k3*2;
	}
}

// The function computes the autocorrelation values.
int acor(int *FW, int n, int N)
{
	int i;
	long double *AC=(long double *)malloc(N*sizeof(long double));
	long double *ACt=(long double *)malloc(N*sizeof(long double));
	for (i=0;i<N;i++)
		ACt[i]=((long double) FW[i])*((long double) FW[i]);
	fastwhld(AC,ACt,n,N);

	long double D,Maxi=-1;
	for (i=1;i<N;i++)
	{
		D=AC[i];
		if (AC[i]<0)
			D=-AC[i];
		if (D>Maxi)
			Maxi=D;
	}
	free(AC);
	free(ACt);
	return ((int) (Maxi/N));
}

// The function computes the algebraic degree.
int anf(int *TT, int n, int N)
{
	int i,j,k,it,p,su,Maxi=0;

// Hamming weights of binary vectors
	for (i=0;i<N;i++)
	{
		k=0;
		for (j=0;j<n;j++)
			k=k+((i&(1<<((n-1)-j)))>>((n-1)-j));
		BS[i]=k;
	}

	for (i=0;i<N;i++)
		T[i]=TT[i];

	for (i=0;i<n;i++)
	{
		k=0;
		su=0;
		for (j=0;j<(1<<i);j++)
		{
			p=(1<<(n-i));
			for (it=k;it<k+p;it++)		t[it-k]=T[it];
			k=k+p;
			for (it=p/2;it<p;it++)		t[it]=t[it-p/2]^t[it];
			for (it=su;it<su+p;it++)	u[it]=t[it-su];
			su=su+p;
		}
		for (j=0;j<N;j++)
			T[j]=u[j];
	}

	for (i=0;i<N;i++)
		if (T[i]==1 && BS[i]>Maxi)
			Maxi=BS[i];

	return Maxi;
}

// The function "findmax" is used to find the maximum absolute value in the Walsh-Hadamard spectrum.
int findmax(int *FW, int N)
{
	int i;
	int D,Maxi=-1;
	for (i=0;i<N;i++)
	{
		D=FW[i];
		if (FW[i]<0)
			D=-FW[i];
		if (D>Maxi)
			Maxi=D;
	}
	return Maxi;
}
